.TH "bwx_sdk::bwxPropertyMap< K, V >" 3 "Version 1.0.0" "BWX SDK" \" -*- nroff -*-
.ad l
.nh
.SH NAME
bwx_sdk::bwxPropertyMap< K, V > \- Template class representing a map-based property with advanced features\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <bwx_oop\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "using \fBChangeCallback\fP = std::function<void()>"
.br
.RI "Callback invoked when the map changes\&. "
.ti -1c
.RI "using \fBTimestamp\fP = std::chrono::system_clock::time_point"
.br
.RI "Timestamp of the last modification\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbwxPropertyMap\fP (wxEvtHandler *handler=nullptr, \fBChangeCallback\fP callback=nullptr, size_t historyLimit=0, size_t capacityLimit=0)"
.br
.RI "Constructs a PropertyMap with optional parameters\&. "
.ti -1c
.RI "void \fBset\fP (const K &key, const V &value)"
.br
.RI "Inserts or updates a value associated with a key\&. "
.ti -1c
.RI "std::optional< V > \fBget\fP (const K &key) const"
.br
.RI "Retrieves the value associated with a given key\&. "
.ti -1c
.RI "const V & \fBgetRef\fP (const K &key) const"
.br
.RI "Retrieves a reference to the value associated with a key\&. "
.ti -1c
.RI "void \fBclear\fP ()"
.br
.RI "Clears all elements from the map\&. "
.ti -1c
.RI "size_t \fBsize\fP () const"
.br
.RI "Returns the number of elements in the map\&. "
.ti -1c
.RI "std::map< K, V >::iterator \fBbegin\fP ()"
.br
.ti -1c
.RI "std::map< K, V >::iterator \fBend\fP ()"
.br
.ti -1c
.RI "std::map< K, V >::const_iterator \fBcbegin\fP () const"
.br
.ti -1c
.RI "std::map< K, V >::const_iterator \fBcend\fP () const"
.br
.ti -1c
.RI "void \fBsetReadOnly\fP (bool readOnly)"
.br
.RI "Enables or disables read-only mode\&. "
.ti -1c
.RI "bool \fBisReadOnly\fP () const noexcept"
.br
.RI "Checks if the map is currently in read-only mode\&. "
.ti -1c
.RI "bool \fBundo\fP ()"
.br
.RI "Reverts to the previous state using the undo history\&. "
.ti -1c
.RI "bool \fBredo\fP ()"
.br
.RI "Restores the last undone state using the redo history\&. "
.ti -1c
.RI "void \fBsetHistoryLimit\fP (size_t limit)"
.br
.RI "Sets the maximum number of undo/redo history entries\&. "
.ti -1c
.RI "size_t \fBgetHistoryLimit\fP () const noexcept"
.br
.RI "Retrieves the configured undo/redo history limit\&. "
.ti -1c
.RI "void \fBclearHistory\fP ()"
.br
.RI "Clears the undo and redo histories\&. "
.ti -1c
.RI "void \fBsetCapacityLimit\fP (size_t limit)"
.br
.RI "Sets the capacity limit for the map\&. "
.ti -1c
.RI "size_t \fBgetCapacityLimit\fP () const noexcept"
.br
.RI "Retrieves the configured capacity limit\&. "
.ti -1c
.RI "\fBTimestamp\fP \fBgetLastChangeTime\fP () const"
.br
.RI "Retrieves the timestamp of the last modification\&. "
.ti -1c
.RI "void \fBsetOnChangeCallback\fP (\fBChangeCallback\fP callback)"
.br
.RI "Assigns a callback function for change notifications\&. "
.ti -1c
.RI "void \fBsetEventHandler\fP (wxEvtHandler *handler)"
.br
.RI "Assigns a wxWidgets event handler for notifications\&. "
.ti -1c
.RI "const char * \fBAsCStr\fP (const K &key) const"
.br
.RI "Converts the value of a key to a C-style string\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename K, typename V>
.br
class bwx_sdk::bwxPropertyMap< K, V >"Template class representing a map-based property with advanced features\&. 

This class manages a map of key-value pairs with the following functionalities:
.IP "\(bu" 2
Insertion, retrieval, and removal of elements with thread safety\&.
.IP "\(bu" 2
Undo/redo support with configurable history limits\&.
.IP "\(bu" 2
Read-only mode to prevent modifications\&.
.IP "\(bu" 2
wxWidgets event notifications and callback handling on data changes\&.
.IP "\(bu" 2
Timestamp tracking of the last modification\&.
.IP "\(bu" 2
Iterators for standard container traversal\&.
.IP "\(bu" 2
Optional value retrieval for safe access\&.
.IP "\(bu" 2
Capacity management to limit the number of elements\&.
.IP "\(bu" 2
Data filtering and sorting capabilities\&.
.IP "\(bu" 2
Conversion of values to C-style strings when applicable\&.
.PP
.PP
\fBTemplate Parameters\fP
.RS 4
\fIK\fP Type of the keys in the map\&. 
.br
\fIV\fP Type of the values in the map\&. 
.RE
.PP

.SH "Member Typedef Documentation"
.PP 
.SS "template<typename K , typename V > using \fBbwx_sdk::bwxPropertyMap\fP< K, V >::ChangeCallback = std::function<void()>"

.PP
Callback invoked when the map changes\&. 
.SS "template<typename K , typename V > using \fBbwx_sdk::bwxPropertyMap\fP< K, V >::Timestamp = std::chrono::system_clock::time_point"

.PP
Timestamp of the last modification\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename K , typename V > \fBbwx_sdk::bwxPropertyMap\fP< K, V >::bwxPropertyMap (wxEvtHandler * handler = \fRnullptr\fP, \fBChangeCallback\fP callback = \fRnullptr\fP, size_t historyLimit = \fR0\fP, size_t capacityLimit = \fR0\fP)\fR [inline]\fP, \fR [explicit]\fP"

.PP
Constructs a PropertyMap with optional parameters\&. 
.PP
\fBParameters\fP
.RS 4
\fIhandler\fP Optional wxWidgets event handler for change notifications\&. 
.br
\fIcallback\fP Optional callback invoked when the map changes\&. 
.br
\fIhistoryLimit\fP Maximum number of undo/redo states (0 disables history)\&. 
.br
\fIcapacityLimit\fP Maximum number of elements allowed in the map (0 means unlimited)\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename K , typename V > const char * \fBbwx_sdk::bwxPropertyMap\fP< K, V >::AsCStr (const K & key) const\fR [inline]\fP"

.PP
Converts the value of a key to a C-style string\&. 
.PP
\fBParameters\fP
.RS 4
\fIkey\fP Key whose associated value is converted\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to the C-string or nullptr if unsupported or not found\&. 
.RE
.PP

.SS "template<typename K , typename V > std::map< K, V >::iterator \fBbwx_sdk::bwxPropertyMap\fP< K, V >::begin ()\fR [inline]\fP"

.SS "template<typename K , typename V > std::map< K, V >::const_iterator \fBbwx_sdk::bwxPropertyMap\fP< K, V >::cbegin () const\fR [inline]\fP"

.SS "template<typename K , typename V > std::map< K, V >::const_iterator \fBbwx_sdk::bwxPropertyMap\fP< K, V >::cend () const\fR [inline]\fP"

.SS "template<typename K , typename V > void \fBbwx_sdk::bwxPropertyMap\fP< K, V >::clear ()\fR [inline]\fP"

.PP
Clears all elements from the map\&. 
.SS "template<typename K , typename V > void \fBbwx_sdk::bwxPropertyMap\fP< K, V >::clearHistory ()\fR [inline]\fP"

.PP
Clears the undo and redo histories\&. 
.SS "template<typename K , typename V > std::map< K, V >::iterator \fBbwx_sdk::bwxPropertyMap\fP< K, V >::end ()\fR [inline]\fP"

.SS "template<typename K , typename V > std::optional< V > \fBbwx_sdk::bwxPropertyMap\fP< K, V >::get (const K & key) const\fR [inline]\fP"

.PP
Retrieves the value associated with a given key\&. 
.PP
\fBParameters\fP
.RS 4
\fIkey\fP Key whose associated value is to be retrieved\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Optional containing the value if found, otherwise std::nullopt\&. 
.RE
.PP

.SS "template<typename K , typename V > size_t \fBbwx_sdk::bwxPropertyMap\fP< K, V >::getCapacityLimit () const\fR [inline]\fP, \fR [noexcept]\fP"

.PP
Retrieves the configured capacity limit\&. 
.PP
\fBReturns\fP
.RS 4
Capacity limit value\&. 
.RE
.PP

.SS "template<typename K , typename V > size_t \fBbwx_sdk::bwxPropertyMap\fP< K, V >::getHistoryLimit () const\fR [inline]\fP, \fR [noexcept]\fP"

.PP
Retrieves the configured undo/redo history limit\&. 
.PP
\fBReturns\fP
.RS 4
History limit value\&. 
.RE
.PP

.SS "template<typename K , typename V > \fBTimestamp\fP \fBbwx_sdk::bwxPropertyMap\fP< K, V >::getLastChangeTime () const\fR [inline]\fP"

.PP
Retrieves the timestamp of the last modification\&. 
.PP
\fBReturns\fP
.RS 4
Timestamp of the most recent change\&. 
.RE
.PP

.SS "template<typename K , typename V > const V & \fBbwx_sdk::bwxPropertyMap\fP< K, V >::getRef (const K & key) const\fR [inline]\fP"

.PP
Retrieves a reference to the value associated with a key\&. 
.PP
\fBParameters\fP
.RS 4
\fIkey\fP Key whose value reference is to be retrieved\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Reference to the associated value\&. 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIstd::out_of_range\fP If the key does not exist\&. 
.RE
.PP

.SS "template<typename K , typename V > bool \fBbwx_sdk::bwxPropertyMap\fP< K, V >::isReadOnly () const\fR [inline]\fP, \fR [noexcept]\fP"

.PP
Checks if the map is currently in read-only mode\&. 
.PP
\fBReturns\fP
.RS 4
True if read-only mode is enabled, otherwise false\&. 
.RE
.PP

.SS "template<typename K , typename V > bool \fBbwx_sdk::bwxPropertyMap\fP< K, V >::redo ()\fR [inline]\fP"

.PP
Restores the last undone state using the redo history\&. 
.PP
\fBReturns\fP
.RS 4
True if redo was successful, false otherwise\&. 
.RE
.PP

.SS "template<typename K , typename V > void \fBbwx_sdk::bwxPropertyMap\fP< K, V >::set (const K & key, const V & value)\fR [inline]\fP"

.PP
Inserts or updates a value associated with a key\&. 
.PP
\fBParameters\fP
.RS 4
\fIkey\fP Key to be inserted or updated\&. 
.br
\fIvalue\fP Value to be associated with the key\&. 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIstd::overflow_error\fP If the capacity limit is reached\&. 
.RE
.PP

.SS "template<typename K , typename V > void \fBbwx_sdk::bwxPropertyMap\fP< K, V >::setCapacityLimit (size_t limit)\fR [inline]\fP"

.PP
Sets the capacity limit for the map\&. 
.PP
\fBParameters\fP
.RS 4
\fIlimit\fP Maximum number of elements allowed\&. 
.RE
.PP

.SS "template<typename K , typename V > void \fBbwx_sdk::bwxPropertyMap\fP< K, V >::setEventHandler (wxEvtHandler * handler)\fR [inline]\fP"

.PP
Assigns a wxWidgets event handler for notifications\&. 
.PP
\fBParameters\fP
.RS 4
\fIhandler\fP Pointer to the wxWidgets event handler\&. 
.RE
.PP

.SS "template<typename K , typename V > void \fBbwx_sdk::bwxPropertyMap\fP< K, V >::setHistoryLimit (size_t limit)\fR [inline]\fP"

.PP
Sets the maximum number of undo/redo history entries\&. 
.PP
\fBParameters\fP
.RS 4
\fIlimit\fP Number of history entries to retain\&. 
.RE
.PP

.SS "template<typename K , typename V > void \fBbwx_sdk::bwxPropertyMap\fP< K, V >::setOnChangeCallback (\fBChangeCallback\fP callback)\fR [inline]\fP"

.PP
Assigns a callback function for change notifications\&. 
.PP
\fBParameters\fP
.RS 4
\fIcallback\fP Callback function to be triggered\&. 
.RE
.PP

.SS "template<typename K , typename V > void \fBbwx_sdk::bwxPropertyMap\fP< K, V >::setReadOnly (bool readOnly)\fR [inline]\fP"

.PP
Enables or disables read-only mode\&. 
.PP
\fBParameters\fP
.RS 4
\fIreadOnly\fP True to enable read-only mode, false to disable it\&. 
.RE
.PP

.SS "template<typename K , typename V > size_t \fBbwx_sdk::bwxPropertyMap\fP< K, V >::size () const\fR [inline]\fP"

.PP
Returns the number of elements in the map\&. 
.PP
\fBReturns\fP
.RS 4
Current size of the map\&. 
.RE
.PP

.SS "template<typename K , typename V > bool \fBbwx_sdk::bwxPropertyMap\fP< K, V >::undo ()\fR [inline]\fP"

.PP
Reverts to the previous state using the undo history\&. 
.PP
\fBReturns\fP
.RS 4
True if undo was successful, false otherwise\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for BWX SDK from the source code\&.
