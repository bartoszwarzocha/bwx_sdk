.TH "bwx_sdk" 3 "Version 1.0.0" "BWX SDK" \" -*- nroff -*-
.ad l
.nh
.SH NAME
bwx_sdk
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBbwxCmdLineParser\fP"
.br
.ti -1c
.RI "class \fBbwxInternat\fP"
.br
.ti -1c
.RI "class \fBbwxLanguage\fP"
.br
.ti -1c
.RI "class \fBbwxProperty\fP"
.br
.RI "Template class representing a property with advanced features\&. "
.ti -1c
.RI "class \fBbwxPropertyMap\fP"
.br
.RI "Template class representing a map-based property with advanced features\&. "
.ti -1c
.RI "class \fBbwxPropertyVector\fP"
.br
.RI "Template class representing a vector-based property with advanced features\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBbwxStdPathsInfo\fP (void)"
.br
.RI "Displays standard system paths in a message box\&. "
.ti -1c
.RI "void \fBbwxAddByteFlag\fP (int &var, bwxByteFlag flag) noexcept"
.br
.RI "Adds a bit flag to a variable\&. "
.ti -1c
.RI "void \fBbwxRemoveByteFlag\fP (int &var, bwxByteFlag flag) noexcept"
.br
.RI "Removes a bit flag from a variable\&. "
.ti -1c
.RI "bool \fBbwxIsByteFlagSet\fP (const int &var, bwxByteFlag flag) noexcept"
.br
.RI "Checks whether a bit flag is set in a variable\&. "
.ti -1c
.RI "void \fBbwxSetByteFlag\fP (int &var, bwxByteFlag flag) noexcept"
.br
.RI "Overwrites a variable with a specific bit flag\&. "
.ti -1c
.RI "wxString \fBbwxGetThreadErrorDescription\fP (const wxThreadError &err, bool processLog)"
.br
.RI "Retrieves a description for a thread error\&. "
.ti -1c
.RI "wxString \fBbwxGetSemaphoreErrorDescription\fP (const wxSemaError &err, bool processLog)"
.br
.RI "Retrieves a description for a semaphore error\&. "
.ti -1c
.RI "wxString \fBbwxGetMutexErrorDescritpion\fP (const wxMutexError &err, bool processLog)"
.br
.RI "Retrieves a description for a mutex error\&. "
.ti -1c
.RI "bool \fBbwxIsByteFlagSet\fP (int &var, bwxByteFlag flag) noexcept"
.br
.ti -1c
.RI "\fBWX_DECLARE_STRING_HASH_MAP\fP (\fBbwxLanguage\fP, LangMap)"
.br
.ti -1c
.RI "float \fBbwxToRadians\fP (float dgrs)"
.br
.RI "Converts an angle from degrees to radians\&. "
.ti -1c
.RI "float \fBbwxToDegrees\fP (float rads)"
.br
.RI "Converts an angle from radians to degrees\&. "
.ti -1c
.RI "bool \fBbwxIsPower2\fP (int x)"
.br
.RI "Checks if an integer is a power of 2\&. "
.ti -1c
.RI "int \fBbwxNextPower2\fP (int x)"
.br
.RI "Returns the next power of 2 greater than or equal to the given number\&. "
.ti -1c
.RI "int \fBbwxRand\fP (int min, int max)"
.br
.RI "Generates a random integer within the inclusive range [min, max]\&. "
.ti -1c
.RI "double \fBbwxRand\fP (double min, double max)"
.br
.RI "Generates a random double within the inclusive range [min, max]\&. "
.ti -1c
.RI "int \fBbwxNextMultiple\fP (int m, int value)"
.br
.RI "Returns the smallest multiple of m that is greater than or equal to value\&. "
.ti -1c
.RI "double \fBbwxNextMultiple\fP (double m, double value)"
.br
.RI "Returns the smallest multiple of m that is greater than or equal to value\&. "
.ti -1c
.RI "float \fBbwxIntermediate\fP (float a, float b, float x)"
.br
.RI "Returns a normalized value in the range [0, 1] based on x within the interval [a, b]\&. "
.ti -1c
.RI "wxArrayString \fBbwxSimpleExplode\fP (const wxString &str, const wxString &separator)"
.br
.ti -1c
.RI "void \fBbwxSimpleExplode\fP (wxArrayString *a, const wxString &str, const wxString &separator)"
.br
.ti -1c
.RI "wxColour \fBbwxMixColours\fP (const wxColour &col1, const wxColour &col2, double factor)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "constexpr auto \fBbwxDEFAULT_LANG_FOLDER\fP = 'locale'"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void bwx_sdk::bwxAddByteFlag (int & var, bwxByteFlag flag)\fR [inline]\fP, \fR [noexcept]\fP"

.PP
Adds a bit flag to a variable\&. This inline function sets the specified bit flag within the given variable\&.
.PP
\fBParameters\fP
.RS 4
\fIvar\fP Reference to the variable to modify\&. 
.br
\fIflag\fP The bit flag to add\&. 
.RE
.PP

.SS "wxString bwx_sdk::bwxGetMutexErrorDescritpion (const wxMutexError & err, bool processLog)"

.PP
Retrieves a description for a mutex error\&. This function returns a descriptive message corresponding to the given wxMutexError error code\&. If a description exists, it formats the message, and optionally logs the error\&.
.PP
\fBParameters\fP
.RS 4
\fIerr\fP The wxMutexError error code\&. 
.br
\fIprocessLog\fP If true, the error message will be logged\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A wxString containing the mutex error description\&. 
.RE
.PP

.SS "wxString bwx_sdk::bwxGetSemaphoreErrorDescription (const wxSemaError & err, bool processLog)"

.PP
Retrieves a description for a semaphore error\&. This function returns a descriptive message corresponding to the given wxSemaError error code\&. If a description exists, it formats the message, and optionally logs the error\&.
.PP
\fBParameters\fP
.RS 4
\fIerr\fP The wxSemaError error code\&. 
.br
\fIprocessLog\fP If true, the error message will be logged\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A wxString containing the semaphore error description\&. 
.RE
.PP

.SS "wxString bwx_sdk::bwxGetThreadErrorDescription (const wxThreadError & err, bool processLog)"

.PP
Retrieves a description for a thread error\&. This function returns a descriptive message corresponding to the given wxThreadError error code\&. If a description exists, it formats the message, and optionally logs the error\&.
.PP
\fBParameters\fP
.RS 4
\fIerr\fP The wxThreadError error code\&. 
.br
\fIprocessLog\fP If true, the error message will be logged\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A wxString containing the thread error description\&. 
.RE
.PP

.SS "float BWX_EXPORT bwx_sdk::bwxIntermediate (float a, float b, float x)"

.PP
Returns a normalized value in the range [0, 1] based on x within the interval [a, b]\&. This function performs a smooth interpolation (using a smoothstep function) where the result is 0\&.0 if x is less than a, 1\&.0 if x is greater than or equal to b, and smoothly interpolates between 0 and 1 for values between a and b\&.
.PP
\fBParameters\fP
.RS 4
\fIa\fP The start of the interval\&. 
.br
\fIb\fP The end of the interval\&. 
.br
\fIx\fP The value to interpolate\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A normalized value between 0\&.0 and 1\&.0\&. 
.RE
.PP

.SS "bool bwx_sdk::bwxIsByteFlagSet (const int & var, bwxByteFlag flag)\fR [inline]\fP, \fR [noexcept]\fP"

.PP
Checks whether a bit flag is set in a variable\&. This inline function tests if the specified bit flag is present in the variable\&.
.PP
\fBParameters\fP
.RS 4
\fIvar\fP The variable to check\&. 
.br
\fIflag\fP The bit flag to verify\&. 
.RE
.PP
\fBReturns\fP
.RS 4
true if the flag is set; false otherwise\&. 
.RE
.PP

.SS "bool bwx_sdk::bwxIsByteFlagSet (int & var, bwxByteFlag flag)\fR [inline]\fP, \fR [noexcept]\fP"

.SS "bool BWX_EXPORT bwx_sdk::bwxIsPower2 (int x)"

.PP
Checks if an integer is a power of 2\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The number to check\&. 
.RE
.PP
\fBReturns\fP
.RS 4
true if x is a power of 2; false otherwise\&. 
.RE
.PP

.SS "wxColour bwx_sdk::bwxMixColours (const wxColour & col1, const wxColour & col2, double factor)"

.PP
\fBExamples\fP
.in +1c
\fBE:/C++/Projekty/Libs/bwx_sdk/src/bwx_utils/bwx_utils\&.cpp\fP\&.
.SS "double BWX_EXPORT bwx_sdk::bwxNextMultiple (double m, double value)"

.PP
Returns the smallest multiple of m that is greater than or equal to value\&. 
.PP
\fBParameters\fP
.RS 4
\fIm\fP The base multiplier\&. 
.br
\fIvalue\fP The value to round up\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The smallest multiple of m not less than value (for double values)\&. 
.RE
.PP

.SS "int BWX_EXPORT bwx_sdk::bwxNextMultiple (int m, int value)"

.PP
Returns the smallest multiple of m that is greater than or equal to value\&. 
.PP
\fBParameters\fP
.RS 4
\fIm\fP The base multiplier\&. 
.br
\fIvalue\fP The value to round up\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The smallest multiple of m not less than value\&. 
.RE
.PP

.SS "int BWX_EXPORT bwx_sdk::bwxNextPower2 (int x)"

.PP
Returns the next power of 2 greater than or equal to the given number\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The number for which to find the next power of 2\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The smallest power of 2 that is greater than or equal to x\&. 
.RE
.PP

.SS "double BWX_EXPORT bwx_sdk::bwxRand (double min, double max)"

.PP
Generates a random double within the inclusive range [min, max]\&. 
.PP
\fBParameters\fP
.RS 4
\fImin\fP The minimum value\&. 
.br
\fImax\fP The maximum value\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A random double between min and max\&. 
.RE
.PP

.SS "int BWX_EXPORT bwx_sdk::bwxRand (int min, int max)"

.PP
Generates a random integer within the inclusive range [min, max]\&. 
.PP
\fBParameters\fP
.RS 4
\fImin\fP The minimum value\&. 
.br
\fImax\fP The maximum value\&. 
.RE
.PP
\fBReturns\fP
.RS 4
A random integer between min and max\&. 
.RE
.PP

.SS "void bwx_sdk::bwxRemoveByteFlag (int & var, bwxByteFlag flag)\fR [inline]\fP, \fR [noexcept]\fP"

.PP
Removes a bit flag from a variable\&. This inline function clears the specified bit flag from the given variable\&.
.PP
\fBParameters\fP
.RS 4
\fIvar\fP Reference to the variable to modify\&. 
.br
\fIflag\fP The bit flag to remove\&. 
.RE
.PP

.SS "void bwx_sdk::bwxSetByteFlag (int & var, bwxByteFlag flag)\fR [inline]\fP, \fR [noexcept]\fP"

.PP
Overwrites a variable with a specific bit flag\&. This inline function sets the variable to exactly the given bit flag value, replacing any previous flags\&.
.PP
\fBParameters\fP
.RS 4
\fIvar\fP Reference to the variable to modify\&. 
.br
\fIflag\fP The new bit flag value\&. 
.RE
.PP

.SS "wxArrayString bwx_sdk::bwxSimpleExplode (const wxString & str, const wxString & separator)"

.PP
\fBExamples\fP
.in +1c
\fBE:/C++/Projekty/Libs/bwx_sdk/src/bwx_core/bwx_string\&.cpp\fP\&.
.SS "void bwx_sdk::bwxSimpleExplode (wxArrayString * a, const wxString & str, const wxString & separator)"

.SS "void bwx_sdk::bwxStdPathsInfo (void )"

.PP
Displays standard system paths in a message box\&. This function retrieves several common directories (such as application, configuration, data, and temporary directories) using wxStandardPaths and displays them in a message box\&. 
.SS "float BWX_EXPORT bwx_sdk::bwxToDegrees (float rads)"

.PP
Converts an angle from radians to degrees\&. 
.PP
\fBParameters\fP
.RS 4
\fIrads\fP Angle in radians\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Angle in degrees\&. 
.RE
.PP

.PP
References \fBbwxPI\fP\&.
.SS "float BWX_EXPORT bwx_sdk::bwxToRadians (float dgrs)"

.PP
Converts an angle from degrees to radians\&. 
.PP
\fBParameters\fP
.RS 4
\fIdgrs\fP Angle in degrees\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Angle in radians\&. 
.RE
.PP

.PP
References \fBbwxPI\fP\&.
.SS "bwx_sdk::WX_DECLARE_STRING_HASH_MAP (\fBbwxLanguage\fP , LangMap )"

.SH "Variable Documentation"
.PP 
.SS "auto bwx_sdk::bwxDEFAULT_LANG_FOLDER = 'locale'\fR [constexpr]\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for BWX SDK from the source code\&.
