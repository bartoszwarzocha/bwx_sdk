.TH "bwx_sdk::bwxPropertyVector< T >" 3 "Version 1.0.0" "BWX SDK" \" -*- nroff -*-
.ad l
.nh
.SH NAME
bwx_sdk::bwxPropertyVector< T > \- Template class representing a vector-based property with advanced features\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <bwx_oop\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "using \fBChangeCallback\fP = std::function<void()>"
.br
.RI "Callback invoked when the vector changes\&. "
.ti -1c
.RI "using \fBTimestamp\fP = std::chrono::system_clock::time_point"
.br
.RI "Timestamp of the last modification\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbwxPropertyVector\fP (wxEvtHandler *handler=nullptr, \fBChangeCallback\fP callback=nullptr, size_t historyLimit=0, size_t capacityLimit=0)"
.br
.RI "Constructs a PropertyVector with optional parameters\&. "
.ti -1c
.RI "void \fBadd\fP (const T &value)"
.br
.RI "Adds a value to the vector\&. "
.ti -1c
.RI "std::optional< T > \fBget\fP (size_t index) const"
.br
.RI "Retrieves the value at a specified index safely\&. "
.ti -1c
.RI "T & \fBat\fP (size_t index)"
.br
.RI "Accesses the element at the specified index with bounds checking\&. "
.ti -1c
.RI "void \fBclear\fP ()"
.br
.RI "Clears all elements from the vector\&. "
.ti -1c
.RI "size_t \fBsize\fP () const"
.br
.RI "Retrieves the size of the vector\&. "
.ti -1c
.RI "std::vector< T >::iterator \fBbegin\fP ()"
.br
.ti -1c
.RI "std::vector< T >::iterator \fBend\fP ()"
.br
.ti -1c
.RI "std::vector< T >::const_iterator \fBcbegin\fP () const"
.br
.ti -1c
.RI "std::vector< T >::const_iterator \fBcend\fP () const"
.br
.ti -1c
.RI "void \fBsetReadOnly\fP (bool readOnly)"
.br
.RI "Enables or disables read-only mode\&. "
.ti -1c
.RI "bool \fBisReadOnly\fP () const noexcept"
.br
.RI "Checks if the vector is in read-only mode\&. "
.ti -1c
.RI "bool \fBundo\fP ()"
.br
.RI "Reverts to the previous state from the undo history\&. "
.ti -1c
.RI "bool \fBredo\fP ()"
.br
.RI "Restores the last undone state from the redo history\&. "
.ti -1c
.RI "void \fBsetHistoryLimit\fP (size_t limit)"
.br
.RI "Sets the history limit for undo/redo operations\&. "
.ti -1c
.RI "size_t \fBgetHistoryLimit\fP () const noexcept"
.br
.RI "Retrieves the current undo/redo history limit\&. "
.ti -1c
.RI "void \fBclearHistory\fP ()"
.br
.RI "Clears the undo and redo history\&. "
.ti -1c
.RI "void \fBsetCapacityLimit\fP (size_t limit)"
.br
.RI "Sets the capacity limit of the vector\&. "
.ti -1c
.RI "size_t \fBgetCapacityLimit\fP () const noexcept"
.br
.RI "Retrieves the vector's capacity limit\&. "
.ti -1c
.RI "\fBTimestamp\fP \fBgetLastChangeTime\fP () const"
.br
.RI "Retrieves the timestamp of the last modification\&. "
.ti -1c
.RI "void \fBsetOnChangeCallback\fP (\fBChangeCallback\fP callback)"
.br
.RI "Assigns a callback function for change notifications\&. "
.ti -1c
.RI "void \fBsetEventHandler\fP (wxEvtHandler *handler)"
.br
.RI "Assigns a wxWidgets event handler for notifications\&. "
.ti -1c
.RI "const char * \fBAsCStr\fP (size_t index=0) const"
.br
.RI "Converts an element to a C-style string\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T>
.br
class bwx_sdk::bwxPropertyVector< T >"Template class representing a vector-based property with advanced features\&. 

This class manages a vector of values with the following functionalities:
.IP "\(bu" 2
Safe element insertion, removal, and retrieval\&.
.IP "\(bu" 2
Undo/redo support with configurable history limits\&.
.IP "\(bu" 2
Read-only mode to prevent modifications\&.
.IP "\(bu" 2
wxWidgets event notifications and callback handling on data changes\&.
.IP "\(bu" 2
Timestamp recording for the last data modification\&.
.IP "\(bu" 2
Iterators for standard container traversal\&.
.IP "\(bu" 2
Optional value retrieval for safe access\&.
.IP "\(bu" 2
Capacity management to limit the number of elements\&.
.IP "\(bu" 2
Data filtering and sorting functionalities\&.
.IP "\(bu" 2
Conversion of elements to C-style strings when applicable\&.
.PP
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP Type of the elements in the vector\&. 
.RE
.PP

.SH "Member Typedef Documentation"
.PP 
.SS "template<typename T > using \fBbwx_sdk::bwxPropertyVector\fP< T >::ChangeCallback = std::function<void()>"

.PP
Callback invoked when the vector changes\&. 
.SS "template<typename T > using \fBbwx_sdk::bwxPropertyVector\fP< T >::Timestamp = std::chrono::system_clock::time_point"

.PP
Timestamp of the last modification\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T > \fBbwx_sdk::bwxPropertyVector\fP< T >::bwxPropertyVector (wxEvtHandler * handler = \fRnullptr\fP, \fBChangeCallback\fP callback = \fRnullptr\fP, size_t historyLimit = \fR0\fP, size_t capacityLimit = \fR0\fP)\fR [inline]\fP, \fR [explicit]\fP"

.PP
Constructs a PropertyVector with optional parameters\&. 
.PP
\fBParameters\fP
.RS 4
\fIhandler\fP Optional wxWidgets event handler for change notifications\&. 
.br
\fIcallback\fP Optional callback invoked when the vector changes\&. 
.br
\fIhistoryLimit\fP Maximum number of undo/redo states (0 disables history)\&. 
.br
\fIcapacityLimit\fP Maximum number of elements allowed in the vector (0 means unlimited)\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename T > void \fBbwx_sdk::bwxPropertyVector\fP< T >::add (const T & value)\fR [inline]\fP"

.PP
Adds a value to the vector\&. 
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP The value to be added\&. 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIstd::overflow_error\fP If capacity limit is reached\&. 
.RE
.PP

.SS "template<typename T > const char * \fBbwx_sdk::bwxPropertyVector\fP< T >::AsCStr (size_t index = \fR0\fP) const\fR [inline]\fP"

.PP
Converts an element to a C-style string\&. 
.PP
\fBParameters\fP
.RS 4
\fIindex\fP Index of the element\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to the C-string or nullptr if invalid or unsupported\&. 
.RE
.PP

.SS "template<typename T > T & \fBbwx_sdk::bwxPropertyVector\fP< T >::at (size_t index)\fR [inline]\fP"

.PP
Accesses the element at the specified index with bounds checking\&. 
.PP
\fBParameters\fP
.RS 4
\fIindex\fP Index of the element\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Reference to the element\&. 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIstd::out_of_range\fP If the index is invalid\&. 
.RE
.PP

.SS "template<typename T > std::vector< T >::iterator \fBbwx_sdk::bwxPropertyVector\fP< T >::begin ()\fR [inline]\fP"

.SS "template<typename T > std::vector< T >::const_iterator \fBbwx_sdk::bwxPropertyVector\fP< T >::cbegin () const\fR [inline]\fP"

.SS "template<typename T > std::vector< T >::const_iterator \fBbwx_sdk::bwxPropertyVector\fP< T >::cend () const\fR [inline]\fP"

.SS "template<typename T > void \fBbwx_sdk::bwxPropertyVector\fP< T >::clear ()\fR [inline]\fP"

.PP
Clears all elements from the vector\&. 
.SS "template<typename T > void \fBbwx_sdk::bwxPropertyVector\fP< T >::clearHistory ()\fR [inline]\fP"

.PP
Clears the undo and redo history\&. 
.SS "template<typename T > std::vector< T >::iterator \fBbwx_sdk::bwxPropertyVector\fP< T >::end ()\fR [inline]\fP"

.SS "template<typename T > std::optional< T > \fBbwx_sdk::bwxPropertyVector\fP< T >::get (size_t index) const\fR [inline]\fP"

.PP
Retrieves the value at a specified index safely\&. 
.PP
\fBParameters\fP
.RS 4
\fIindex\fP Index of the element\&. 
.RE
.PP
\fBReturns\fP
.RS 4
Optional containing the value if valid, otherwise std::nullopt\&. 
.RE
.PP

.SS "template<typename T > size_t \fBbwx_sdk::bwxPropertyVector\fP< T >::getCapacityLimit () const\fR [inline]\fP, \fR [noexcept]\fP"

.PP
Retrieves the vector's capacity limit\&. 
.PP
\fBReturns\fP
.RS 4
Configured capacity limit\&. 
.RE
.PP

.SS "template<typename T > size_t \fBbwx_sdk::bwxPropertyVector\fP< T >::getHistoryLimit () const\fR [inline]\fP, \fR [noexcept]\fP"

.PP
Retrieves the current undo/redo history limit\&. 
.PP
\fBReturns\fP
.RS 4
Configured history limit\&. 
.RE
.PP

.SS "template<typename T > \fBTimestamp\fP \fBbwx_sdk::bwxPropertyVector\fP< T >::getLastChangeTime () const\fR [inline]\fP"

.PP
Retrieves the timestamp of the last modification\&. 
.PP
\fBReturns\fP
.RS 4
Timestamp of the last change\&. 
.RE
.PP

.SS "template<typename T > bool \fBbwx_sdk::bwxPropertyVector\fP< T >::isReadOnly () const\fR [inline]\fP, \fR [noexcept]\fP"

.PP
Checks if the vector is in read-only mode\&. 
.PP
\fBReturns\fP
.RS 4
True if read-only, otherwise false\&. 
.RE
.PP

.SS "template<typename T > bool \fBbwx_sdk::bwxPropertyVector\fP< T >::redo ()\fR [inline]\fP"

.PP
Restores the last undone state from the redo history\&. 
.PP
\fBReturns\fP
.RS 4
True if successful, false otherwise\&. 
.RE
.PP

.SS "template<typename T > void \fBbwx_sdk::bwxPropertyVector\fP< T >::setCapacityLimit (size_t limit)\fR [inline]\fP"

.PP
Sets the capacity limit of the vector\&. 
.PP
\fBParameters\fP
.RS 4
\fIlimit\fP Maximum allowed number of elements\&. 
.RE
.PP

.SS "template<typename T > void \fBbwx_sdk::bwxPropertyVector\fP< T >::setEventHandler (wxEvtHandler * handler)\fR [inline]\fP"

.PP
Assigns a wxWidgets event handler for notifications\&. 
.PP
\fBParameters\fP
.RS 4
\fIhandler\fP Pointer to the event handler\&. 
.RE
.PP

.SS "template<typename T > void \fBbwx_sdk::bwxPropertyVector\fP< T >::setHistoryLimit (size_t limit)\fR [inline]\fP"

.PP
Sets the history limit for undo/redo operations\&. 
.PP
\fBParameters\fP
.RS 4
\fIlimit\fP Number of history entries to retain\&. 
.RE
.PP

.SS "template<typename T > void \fBbwx_sdk::bwxPropertyVector\fP< T >::setOnChangeCallback (\fBChangeCallback\fP callback)\fR [inline]\fP"

.PP
Assigns a callback function for change notifications\&. 
.PP
\fBParameters\fP
.RS 4
\fIcallback\fP Callback function to be invoked\&. 
.RE
.PP

.SS "template<typename T > void \fBbwx_sdk::bwxPropertyVector\fP< T >::setReadOnly (bool readOnly)\fR [inline]\fP"

.PP
Enables or disables read-only mode\&. 
.PP
\fBParameters\fP
.RS 4
\fIreadOnly\fP True to enable, false to disable modifications\&. 
.RE
.PP

.SS "template<typename T > size_t \fBbwx_sdk::bwxPropertyVector\fP< T >::size () const\fR [inline]\fP"

.PP
Retrieves the size of the vector\&. 
.PP
\fBReturns\fP
.RS 4
Number of elements in the vector\&. 
.RE
.PP

.SS "template<typename T > bool \fBbwx_sdk::bwxPropertyVector\fP< T >::undo ()\fR [inline]\fP"

.PP
Reverts to the previous state from the undo history\&. 
.PP
\fBReturns\fP
.RS 4
True if successful, false otherwise\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for BWX SDK from the source code\&.
