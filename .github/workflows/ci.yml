name: C++ CI/CD

on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false  # Zapobiega przerywaniu wszystkich zadań po pierwszym błędzie
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release, Debug]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.22.0'

      - name: Install required Linux packages (for Linux builds)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf \
            automake \
            libtool \
            libtool-bin \
            pkg-config \
            ninja-build \
            build-essential \
            libssl-dev \
            libffi-dev \
            libgmp-dev \
            libpcre3-dev \
            gettext \
            texinfo \
            m4 \
            gperf \
            bison \
            flex
        shell: bash

      - name: Install required macOS packages (for macOS builds)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew reinstall --formula cmake pkgconf gettext
          brew install ninja
          brew link --force gettext
          export PKG_CONFIG_PATH="$(brew --prefix)/lib/pkgconfig:$(brew --prefix)/opt/gettext/lib/pkgconfig"
        shell: bash

      - name: Cache vcpkg and dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            ${{ github.workspace }}/build/vcpkg_installed
            ${{ github.workspace }}/vcpkg/downloads
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}

      - name: Prepare vcpkg directory
        run: |
          if [ ! -d "vcpkg" ]; then
            git clone https://github.com/microsoft/vcpkg.git
          else
            echo "vcpkg directory already exists. Skipping clone."
          fi
        shell: bash

      - name: Bootstrap vcpkg
        run: |
          cd vcpkg
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./bootstrap-vcpkg.bat
          else
            ./bootstrap-vcpkg.sh
          fi
        shell: bash

      - name: Set VCPKG Triplet
        id: set_triplet
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "VCPKG_TRIPLET=x64-windows" >> "$GITHUB_ENV"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "VCPKG_TRIPLET=x64-osx" >> "$GITHUB_ENV"
          else
            echo "VCPKG_TRIPLET=x64-linux" >> "$GITHUB_ENV"
          fi
        shell: bash

      - name: Install dependencies
        run: |
          echo "Installing dependencies for triplet: $VCPKG_TRIPLET"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            .\\vcpkg\\vcpkg.exe install --triplet $VCPKG_TRIPLET --clean-after-build
          else
            ./vcpkg/vcpkg install --triplet $VCPKG_TRIPLET --clean-after-build --x-manifest-root="${{ github.workspace }}"
          fi
        shell: bash

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          BUILD_DIR="build/${{ matrix.os }}-${{ matrix.build_type }}"
          mkdir -p "$BUILD_DIR"

          cmake -B "$BUILD_DIR" -S . \
            -G "Visual Studio 17 2022" \
            -A x64 \
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET="$VCPKG_TRIPLET" \
            -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}" \
            -DBUILD_SHARED_LIBS=OFF
        shell: bash

      - name: Configure CMake (Linux & macOS)
        if: matrix.os != 'windows-latest'
        run: |
          BUILD_DIR="build/${{ matrix.os }}-${{ matrix.build_type }}"
          mkdir -p "$BUILD_DIR"

          cmake -B "$BUILD_DIR" -S . \
            -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET="$VCPKG_TRIPLET" \
            -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}" \
            -DBUILD_SHARED_LIBS=OFF \
            -DPKG_CONFIG_PATH="$PKG_CONFIG_PATH"
        shell: bash

      - name: Build
        run: |
          BUILD_DIR="build/${{ matrix.os }}-${{ matrix.build_type }}"
          cmake --build "$BUILD_DIR" --config "${{ matrix.build_type }}"
        shell: bash

      - name: Run tests (if any)
        run: |
          BUILD_DIR="build/${{ matrix.os }}-${{ matrix.build_type }}"
          cd "$BUILD_DIR"
          ctest --output-on-failure --build-config "${{ matrix.build_type }}"
        shell: bash
