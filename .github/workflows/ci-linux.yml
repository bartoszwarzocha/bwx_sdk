name: LINUX

on:
  push:
    branches:
      - master
    paths:
      - 'include/**'
      - 'src/**'
      - 'examples/**'
      - '.github/**'
  pull_request:
    branches:
      - master
    paths:
      - 'include/**'
      - 'src/**'
      - 'examples/**'
      - '.github/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  LINUX:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        include:
          - name: Ubuntu 22.04 wxGTK 3
            runner: ubuntu-22.04
            cmake_generator: Unix Makefiles
            cmake_samples: ALL

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      if: runner.os != 'Windows'
      run: |
        export CFLAGS="-D_strnicmp=strncasecmp -I/usr/include/audio -I/opt/vc/include $CFLAGS"
        export CXXFLAGS="-D_strnicmp=strncasecmp -I/usr/include/audio -I/opt/vc/include $CXXFLAGS"
        
        if apt-cache show libraspberrypi-dev > /dev/null 2>&1; then
          LIBRPI_PACKAGE="libraspberrypi-dev"
        else
          echo "The package libraspberrypi-dev is not available in standard repositories. Installation will be skipped."
          LIBRPI_PACKAGE=""
        fi
        
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build g++ autoconf automake libtool pkg-config libtool-bin m4 gettext bison flex gfortran python3-pip
        sudo apt-get install -y \
            nasm \
            meson \
            libfontconfig1-dev \
            libfreetype6-dev \
            libglib2.0-dev \
            libgtk-3-dev \
            libx11-dev \
            libxext-dev \
            libxrender-dev \
            libpng-dev \
            zlib1g-dev \
            libdbus-1-dev \
            libatk1.0-dev \
            libxi-dev \
            libxtst-dev \
            gobject-introspection \
            python3-gi \
            libcairo2-dev \
            libpango1.0-dev \
            libgdk-pixbuf2.0-dev \
            libxinerama-dev \
            libxrandr-dev \
            libxcomposite-dev \
            libxdamage-dev \
            libxcursor-dev \
            libxfixes-dev \
            libxss-dev \
            libepoxy-dev \
            libwayland-dev \
            libinput-dev \
            libasound2-dev \
            libpulse-dev \
            libxft-dev \
            libxkbcommon-dev \
            libegl1-mesa-dev \
            libibus-1.0-dev \
            mesa-common-dev \
            libgl1-mesa-dev \
            libxxf86vm-dev \
            libaudio-dev \
            $LIBRPI_PACKAGE
            
        # Fix the LT_SYS_SYMBOL_USCORE error in autoconf
        aclocal --install -I build-aux/m4
        libtoolize --force --copy
        autoreconf --force --install --verbose

    - name: Show build environment
      run: |
        echo "Environment:"
        env | sort
        echo

        echo "Make version:"
        make --version
        echo

        echo "Compiler version:"
        ${CXX-g++} --version
        echo

        echo "ccache version:"
        ccache --version || echo "ccache not available"
        echo

        echo "Free space:"
        df -h /
        echo

    - name: Set up vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        git pull
        ./bootstrap-vcpkg.sh
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    - name: Install vcpkg dependencies
      run: |
        ./vcpkg/vcpkg install --triplet x64-linux
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    - name: Configure CMake
      run: |
        VCPKG_TRIPLET=x64-linux
        BUILD_DIR="build/linux-${{ matrix.build_type }}"
        mkdir -p "$BUILD_DIR"
        cmake -B "$BUILD_DIR" -S . \
          -G Ninja \
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" \
          -DVCPKG_TARGET_TRIPLET="$VCPKG_TRIPLET" \
          -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}" \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    - name: Build project
      run: |
        BUILD_DIR="build/linux-${{ matrix.build_type }}"
        cmake --build "$BUILD_DIR"

    - name: Run tests
      run: |
        BUILD_DIR="build/linux-${{ matrix.build_type }}"
        cd "$BUILD_DIR"
        ctest -V

    - name: Upload build logs on failure
      if: failure()
      run: |
        if [ -f "${{ github.workspace }}/vcpkg/buildtrees/libxcrypt/autoconf-x64-linux-out.log" ]; then
          echo "Uploading autoconf-x64-linux-out.log"
          echo "${{ github.workspace }}/vcpkg/buildtrees/libxcrypt/autoconf-x64-linux-out.log" > logs-to-upload.txt
        fi
        if [ -f "${{ github.workspace }}/vcpkg/buildtrees/libxcrypt/autoconf-x64-linux-err.log" ]; then
          echo "Uploading autoconf-x64-linux-err.log"
          echo "${{ github.workspace }}/vcpkg/buildtrees/libxcrypt/autoconf-x64-linux-err.log" >> logs-to-upload.txt
        fi
        if [ -f logs-to-upload.txt ]; then
          tar -czf build-logs.tar.gz -T logs-to-upload.txt
        else
          echo "No log files found to upload."
        fi
      uses: actions/upload-artifact@v4.6.0
      with:
        name: build-logs
        path: build-logs.tar.gz