name: LINUX

on:
  push:
    branches:
      - master
    paths:
      - 'include/**'
      - 'src/**'
      - 'examples/**'
  pull_request:
    branches:
      - master
    paths:
      - 'include/**'
      - 'src/**'
      - 'examples/**'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release, Debug]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.22.0'

      - name: Install Required Packages (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf \
            automake \
            libtool \
            pkg-config \
            ninja-build \
            build-essential \
            libglib2.0-dev \
            libfontconfig1-dev \
            libfreetype6-dev \
            libpng-dev \
            libxrender-dev \
            libxcb1-dev \
            libxcb-render0-dev \
            libxcb-shm0-dev \
            meson \
            gperf \
            bison \
            flex \
            m4 \
            gettext \
            texinfo \
            libssl-dev \
            libffi-dev \
            libltdl-dev || echo "Some packages could not be installed, proceeding anyway."

          # Build libxcrypt from source only if missing
          if ! ldconfig -p | grep -q libxcrypt; then
            echo "Building libxcrypt from source..."
            wget -q https://github.com/besser82/libxcrypt/releases/download/v4.4.36/libxcrypt-4.4.36.tar.xz -O libxcrypt.tar.xz || { echo "Failed to download libxcrypt."; exit 1; }
            tar -xf libxcrypt.tar.xz
            cd libxcrypt-4.4.36 || { echo "Extraction failed."; exit 1; }

            # Ensure necessary tools and macros are available for autoreconf
            export ACLOCAL_PATH="/usr/share/aclocal"
            autoreconf -fiv || { echo "autoreconf failed."; cat config.log || true; exit 1; }

            ./configure --prefix=/usr || { echo "configure failed."; exit 1; }
            make -j$(nproc) || { echo "make failed."; exit 1; }
            sudo make install || { echo "make install failed."; exit 1; }
            cd ..
            rm -rf libxcrypt-4.4.36 libxcrypt.tar.xz
          else
            echo "libxcrypt is already installed."
          fi
        shell: bash

      - name: Cache vcpkg and Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            ${{ github.workspace }}/build/vcpkg_installed
            ${{ github.workspace }}/vcpkg/downloads
          key: linux-vcpkg-${{ hashFiles('vcpkg.json') }}

      - name: Prepare vcpkg
        run: |
          if [ ! -d "vcpkg" ]; then
            git clone https://github.com/microsoft/vcpkg.git
          fi
          cd vcpkg
          git pull --rebase origin master
          ./bootstrap-vcpkg.sh || { echo "vcpkg bootstrap failed."; exit 1; }
        shell: bash

      - name: Set VCPKG Triplet
        run: echo "VCPKG_TRIPLET=x64-linux" >> "$GITHUB_ENV"
        shell: bash

      - name: Install Dependencies via vcpkg (Manifest Mode)
        run: |
          RETRIES=3
          for i in $(seq 1 $RETRIES); do
            echo "Attempt $i to install dependencies via vcpkg..."
            if ./vcpkg/vcpkg install --triplet "$VCPKG_TRIPLET"; then
              echo "vcpkg install succeeded."
              break
            else
              echo "vcpkg install failed on attempt $i. Cleaning buildtrees and retrying..."
              rm -rf ./vcpkg/buildtrees
              if [ "$i" -eq "$RETRIES" ]; then
                echo "vcpkg install failed after $RETRIES attempts. Exiting."
                exit 1
              fi
              sleep 10
            fi
          done
        shell: bash

      - name: Configure CMake
        run: |
          BUILD_DIR="build/linux-${{ matrix.build_type }}"
          mkdir -p "$BUILD_DIR"
          cmake -B "$BUILD_DIR" -S . \
            -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET="$VCPKG_TRIPLET" \
            -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}" \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        shell: bash

      - name: Build
        run: |
          BUILD_DIR="build/linux-${{ matrix.build_type }}"
          cmake --build "$BUILD_DIR" --config "${{ matrix.build_type }}"
        shell: bash

      - name: Run Tests (if any)
        run: |
          BUILD_DIR="build/linux-${{ matrix.build_type }}"
          cd "$BUILD_DIR"
          ctest --output-on-failure --build-config "${{ matrix.build_type }}"
        shell: bash
