name: LINUX

on:
  push:
    branches:
      - master
    paths:
      - 'include/**'
      - 'src/**'
      - 'examples/**'
      - '.github/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - master
    paths:
      - 'include/**'
      - 'src/**'
      - 'examples/**'
      - '.github/**'
      - '.github/workflows/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  LINUX:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        include:
          - name: Ubuntu 22.04 wxGTK 3
            runner: ubuntu-22.04
            cmake_generator: Unix Makefiles
            cmake_samples: ALL

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      if: runner.os != 'Windows'
      run: |
        export CFLAGS="-D_strnicmp=strncasecmp -I/usr/include/audio -I/opt/vc/include $CFLAGS"
        export CXXFLAGS="-D_strnicmp=strncasecmp -I/usr/include/audio -I/opt/vc/include $CXXFLAGS"

        if apt-cache show libraspberrypi-dev > /dev/null 2>&1; then
          LIBRPI_PACKAGE="libraspberrypi-dev"
        else
          echo "The package libraspberrypi-dev is not available in standard repositories. Installation will be skipped."
          LIBRPI_PACKAGE=""
        fi

        sudo apt-get update
        sudo apt-get install -y \
            # Basic development tools
            build-essential cmake ninja-build g++ autoconf automake libtool pkg-config libtool-bin m4 gettext bison flex gfortran python3-pip \
            # Assembly language tools
            nasm \
            # Build system generator
            meson \
            # Font and graphics libraries
            libfontconfig1-dev libfreetype6-dev libglib2.0-dev \
            # GTK development libraries
            libgtk-3-dev \
            # X11 development libraries
            libx11-dev libxext-dev libxrender-dev libpng-dev zlib1g-dev libdbus-1-dev libatk1.0-dev libxi-dev libxtst-dev \
            # GObject introspection
            gobject-introspection python3-gi \
            # Cairo graphics library
            libcairo2-dev libpango1.0-dev libgdk-pixbuf2.0-dev \
            # More X11 development libraries
            libxinerama-dev libxrandr-dev libxcomposite-dev libxdamage-dev libxcursor-dev libxfixes-dev libxss-dev \
            # Epoxy library for OpenGL function management
            libepoxy-dev \
            # Wayland development libraries
            libwayland-dev libinput-dev \
            # Audio development libraries
            libasound2-dev libpulse-dev libxft-dev libxkbcommon-dev \
            # OpenGL and EGL development libraries
            libegl1-mesa-dev libibus-1.0-dev mesa-common-dev libgl1-mesa-dev libxxf86vm-dev libaudio-dev \
            # Raspberry Pi development library (conditional)
            $LIBRPI_PACKAGE

    - name: Configure project with autoconf
      if: runner.os != 'Windows'
      run: |
        if [ -f configure.ac ]; then
          echo "Found configure.ac, running autoreconf steps with retries..."
          for attempt in {1..3}; do
            echo "Attempt $attempt to run autoreconf..."
            mkdir -p build-aux/m4 build-aux/m4-autogen m4
            aclocal --install -I build-aux/m4 && \
            libtoolize --force --copy && \
            autoreconf --force --install --verbose && break || {
              echo "Attempt $attempt failed. Retrying in 10 seconds..."
              sleep 10
            }
          done
        else
          echo "No configure.ac file found in the project directory. Skipping autoreconf."
        fi

    - name: Show build environment
      run: |
        echo "Environment:"
        env | sort
        echo

        echo "Make version:"
        make --version
        echo

        echo "Compiler version:"
        ${CXX-g++} --version
        echo

        echo "Free space:"
        df -h /
        echo

    - name: Set up vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        git pull
        ./bootstrap-vcpkg.sh
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    - name: Install vcpkg dependencies
      run: |
        for attempt in {1..3}; do
          echo "Attempt $attempt to install vcpkg dependencies..."
          ./vcpkg/vcpkg install --triplet x64-linux && break || {
            echo "Attempt $attempt failed. Cleaning buildtrees and retrying in 10 seconds..."
            rm -rf ./vcpkg/buildtrees
            sleep 10
          }
        done
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    - name: Configure CMake
      run: |
        VCPKG_TRIPLET=x64-linux
        BUILD_DIR="build/linux-${{ matrix.build_type }}"
        mkdir -p "$BUILD_DIR"
        cmake -B "$BUILD_DIR" -S . \
          -G Ninja \
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" \
          -DVCPKG_TARGET_TRIPLET="$VCPKG_TRIPLET" \
          -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}" \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    - name: Build project
      run: |
        BUILD_DIR="build/linux-${{ matrix.build_type }}"
        for attempt in {1..3}; do
          echo "Attempt $attempt to build project..."
          cmake --build "$BUILD_DIR" && break || {
            echo "Build attempt $attempt failed. Retrying in 10 seconds..."
            sleep 10
          }
        done

    - name: Run tests
      run: |
        BUILD_DIR="build/linux-${{ matrix.build_type }}"
        cd "$BUILD_DIR"
        ctest -V

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4.6.0
      with:
        name: build-logs
        path: |
          ${{ github.workspace }}/vcpkg/buildtrees/libxcrypt/autoconf-x64-linux-out.log
          ${{ github.workspace }}/vcpkg/buildtrees/libxcrypt/autoconf-x64-linux-err.log