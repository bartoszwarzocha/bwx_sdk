name: WINDOWS

on:
  push:
    branches:
      - master
    paths:
      - 'include/**'
      - 'src/**'
      - 'examples/**'
      - '.github/**'
  pull_request:
    branches:
      - master
    paths:
      - 'include/**'
      - 'src/**'
      - 'examples/**'
      - '.github/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  WINDOWS:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        include:
          - name: Windows MSVC
            runner: windows-latest
            no_sudo: 1
            cmake_defines: -DCMAKE_C_COMPILER=cl.exe -DCMAKE_CXX_COMPILER=cl.exe
            cmake_generator: Ninja
            cmake_samples: SOME
            cmake_tests: CONSOLE_ONLY

    defaults:
      run:
        shell: powershell
        
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.22.0'  

      - name: Install dependencies
        run: choco install zip -y

      - name: Cache vcpkg and dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            ${{ github.workspace }}/build/vcpkg_installed
            ${{ github.workspace }}/vcpkg/downloads
          key: windows-vcpkg-${{ hashFiles('vcpkg.json') }}

      - name: Prepare vcpkg directory
        run: |
          if (!(Test-Path -Path "vcpkg")) {
            git clone https://github.com/microsoft/vcpkg.git
          } else {
            Write-Output "vcpkg directory already exists. Skipping clone."
          }

      - name: Bootstrap vcpkg
        run: |
          cd vcpkg
          .\bootstrap-vcpkg.bat

      - name: Set VCPKG Triplet
        run: echo "VCPKG_TRIPLET=x64-windows" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install Dependencies via vcpkg (Manifest Mode)
        run: .\vcpkg\vcpkg.exe install --triplet x64-windows --clean-after-build

      - name: Configure CMake
        run: |
          $BUILD_DIR = "build/windows-latest-${{ matrix.build_type }}"
          if (!(Test-Path -Path $BUILD_DIR)) {
            New-Item -ItemType Directory -Force -Path $BUILD_DIR
          }
          cmake -B "$BUILD_DIR" -S "." `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET="x64-windows" `
            -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}" `
            -DBUILD_SHARED_LIBS=OFF

      - name: Build
        run: |
          $BUILD_DIR = "build/windows-latest-${{ matrix.build_type }}"
          cmake --build "$BUILD_DIR" --config "${{ matrix.build_type }}"

      - name: Determine Compiler Version
        id: compiler_info
        run: |
          $COMPILER_VERSION = cl.exe 2>&1 | Select-String "Version" | ForEach-Object { $_ -match 'Version (\d+\.\d+\.\d+)' ; $matches[1] }
          Write-Output "compiler_version=$COMPILER_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Package artifacts
        run: |
          $BUILD_DIR = "build/windows-latest-${{ matrix.build_type }}"
          $VERSION = "${{ matrix.build_type }}-${{ env.compiler_version }}-x64"
          $PACKAGE_NAME = "bwx_sdk-$VERSION.zip"
          if (!(Test-Path -Path "packages")) {
            New-Item -ItemType Directory -Force -Path "packages"
          }
          Compress-Archive -Path `
            "bin", "lib", "include", `
            "README.md", "LICENSE.md" `
            -DestinationPath "packages\\$PACKAGE_NAME"

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4.6.0
        with:
          name: bwx_sdk-${{ matrix.build_type }}
          path: packages/*.zip

      - name: Run tests (if any)
        run: |
          $BUILD_DIR = "build/windows-latest-${{ matrix.build_type }}"
          cd "$BUILD_DIR"
          ctest --output-on-failure --build-config "${{ matrix.build_type }}"
