name: MACOS

on:
  push:
    branches:
      - master
    paths:
      - 'include/**'
      - 'src/**'
      - 'examples/**'
      - '.github/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - master
    paths:
      - 'include/**'
      - 'src/**'
      - 'examples/**'
      - '.github/**'
      - '.github/workflows/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  macOS:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        include:
          - name: macOS 14
            runner: macos-14
            cmake_generator: Xcode

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install dependencies
      if: runner.os == 'macOS'
      run: |
        # Update Homebrew and install dependencies
        brew update

        # Basic development tools
        brew install cmake ninja autoconf automake libtool pkg-config gettext bison flex gfortran nasm meson

        # Font and graphics libraries
        brew install fontconfig freetype glib gtk+3

        # X11 libraries (with corrected package names)
        brew install xquartz libpng zlib dbus atk libxinerama libxrandr libxcomposite libxdamage libxcursor libxfixes libxss

        # GObject introspection and Python bindings
        brew install gobject-introspection pygobject3

        # Graphics rendering libraries
        brew install cairo pango gdk-pixbuf

        # Epoxy library for OpenGL function management
        brew install epoxy

        # Wayland and input support
        brew install wayland libinput

        # Audio support libraries
        brew install alsa-lib pulseaudio xft xkbcommon

        # OpenGL and EGL support
        brew install mesa ibus

    - name: Configure project with autoconf (3 attempts)
      if: runner.os == 'macOS'
      run: |
        if [ -f configure.ac ]; then
          echo "Found configure.ac, starting autoreconf attempts..."
          for attempt in {1..3}; do
            echo "Attempt $attempt..."
            mkdir -p build-aux/m4 build-aux/m4-autogen m4
            aclocal --install -I build-aux/m4 && \
            libtoolize --force --copy && \
            autoreconf --force --install --verbose && break || {
              echo "Attempt $attempt failed. Retrying in 10 seconds..."
              sleep 10
            }
          done
        else
          echo "No configure.ac found. Skipping autoreconf."
        fi

    - name: Show build environment
      run: |
        echo "Environment Variables:"
        env | sort

        echo "Compiler Version:"
        ${CXX:-g++} --version

        echo "Disk Space:"
        df -h /

    - name: Set up vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        git pull
        ./bootstrap-vcpkg.sh
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    - name: Install vcpkg dependencies (3 attempts)
      run: |
        for attempt in {1..3}; do
          echo "Attempt $attempt to install vcpkg dependencies..."
          ./vcpkg/vcpkg install --triplet x64-osx && break || {
            echo "vcpkg install failed. Cleaning buildtrees and retrying in 10 seconds..."
            rm -rf ./vcpkg/buildtrees
            sleep 10
          }
        done
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    - name: Configure CMake
      run: |
        VCPKG_TRIPLET=x64-osx
        BUILD_DIR="build/macos-${{ matrix.build_type }}"
        mkdir -p "$BUILD_DIR"
        cmake -B "$BUILD_DIR" -S . \
          -G Ninja \
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" \
          -DVCPKG_TARGET_TRIPLET="$VCPKG_TRIPLET" \
          -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}" \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    - name: Build project (3 attempts)
      run: |
        BUILD_DIR="build/macos-${{ matrix.build_type }}"
        for attempt in {1..3}; do
          echo "Attempt $attempt to build project..."
          cmake --build "$BUILD_DIR" && break || {
            echo "Build attempt $attempt failed. Retrying in 10 seconds..."
            sleep 10
          }
        done

    - name: Run tests
      run: |
        BUILD_DIR="build/macos-${{ matrix.build_type }}"
        cd "$BUILD_DIR"
        ctest -V

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4.6.0
      with:
        name: build-logs
        path: |
          ${{ github.workspace }}/vcpkg/buildtrees/libxcrypt/autoconf-x64-osx-out.log
          ${{ github.workspace }}/vcpkg/buildtrees/libxcrypt/autoconf-x64-osx-err.log
